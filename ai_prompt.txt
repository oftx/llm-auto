有以下需求：
1. 自动化运行命令并获取输出：通过python代码控制终端模拟器运行若干条命令并获取输出
2. 交互式运行：用户可以在代码自动运行命令的过程中和终端模拟器交互并辅助python代码继续运行比如输入密码操作或监测程序运行状况
3. 持久化会话：终端会话持久运行，使下次程序运行可以延续上一次运行的状态

可以有哪些实现方法？请描述


请使用方案三
1. 除了实现这个类的功能外，还需要在命令未返回0时询问用户 `检测到命令没有返回0，命令可能执行失败，是否继续执行(y/N):`，而不是直接中断执行。
2. 把 echo "TMUX_CMD_EXIT_CODE_x:$?" 另起一行运行，而不是与需要执行的命令一起运行，以便清除包含这个标识符的行，以保证输出内容的干净

按序运行命令的步骤:
1. 在每条命令运行后，同时再运行一条包含唯一标识符的echo命令
2. 使用 wait-for 监听唯一标识符
3. 如果找到唯一标识符，执行下一条命令
4. 在所有命令执行完成后，获取面板内容（pane.capture_pane()），并清除包含唯一标识符的行

修改以下代码：
1. 去除run命令，每条命令依次执行
2. 程序运行结束后询问用户是否需要也让会话退出，默认否，按回车默认输入（y/N）
3. 程序运行时，不再自动进入tmux终端，而是提供命令来提示用户进入新终端查看命令执行的实时进度：print("可在新终端使用以下命令连接会话: tmux attach -t", session_name)
4. 更新main函数中的示例代码以展示修改后的运行结果

按序运行命令的步骤(x)：
1. 获取提示符格式
2. 循环获取面板内容 pane.capture_pane()
3. 对比获取内容的最后一行的格式是否与提示符格式符合
4. 如果符合格式，继续执行下一条命令

自动命令执行器连接会话后运行流程(x)：
1. 清除历史记录: clear
2. 运行命令并输出结果
3. 在最后echo一个唯一标识符表示运行结束
4. 捕获所有内容: pane.capture_pane()
5. 截取开始到结束的内容

借助 libtmux 使用 python 完成一个自动运行的交互式终端。
要求：
1. 使用面向对象的概念
2. 在运行时，使用script命令捕获运行结果并保存到文件
3. 对象使用通用的代码，测试代码写到 main 方法中
4. 运行命令后，直接进入tmux中让用户直观看到运行流程，并且方便需要用户时的操作比如sudo输入密码
5. 代码中不要有过多注释

仅展示最终代码即可